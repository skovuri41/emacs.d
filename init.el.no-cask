;; Add /usr/local/bin to path
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
(setq exec-path (append exec-path '("/usr/local/bin")))
(setq default-directory (getenv "HOME"))

(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives
             '("melpa-stable" . "http://melpa-stable.milkbox.net/packages/"))
(add-to-list 'package-pinned-packages '(cider . "melpa-stable") t)
(add-to-list 'package-pinned-packages '(ac-cider . "melpa-stable") t)
(add-to-list 'package-pinned-packages '(clojure-mode . "melpa-stable") t)
(add-to-list 'package-pinned-packages '(clj-refactor . "melpa-stable") t)
(add-to-list 'package-pinned-packages '(cider-eval-sexp-fu. "melpa-stable") t)

;; keep the installed packages in .emacs.d
(setq package-user-dir (expand-file-name "elpa" user-emacs-directory))
(package-initialize)
;; ;; update the package metadata
(package-refresh-contents)

(setq my-packages '(company
                    company-quickhelp
		    direx
		    drag-stuff
		    expand-region
		    evil
                    evil-cleverparens
                    evil-escape
                    evil-leader
                    evil-org
                    evil-surround
                    evil-nerd-commenter
                    evil-lisp-state
                    evil-snipe
                    evil-numbers
                    evil-matchit
                    evil-iedit-state
                    evil-visualstar
                    flx-ido
		    flyspell
                    flycheck
                    fancy-narrow
		    git-blame
		    gitconfig-mode
		    gitignore-mode
		    grizzl
		    guide-key
		    helm
		    helm-descbinds
		    helm-gtags
		    helm-projectile
		    helm-swoop
                    helm-ag
                    helm-backup
		    ido-vertical-mode
		    json-mode
		    magit
		    multiple-cursors
		    org
		    org-bullets
                    org-pomodoro
		    projectile
		    smart-mode-line
		    smartparens
		    smex
		    undo-tree
		    use-package
                    which-key
		    yasnippet
		    zenburn-theme
                    ace-jump-buffer
                    ace-window
                    projectile
                    easy-kill
                    zop-to-char
                    web-mode
                    csv-mode
                    csv-nav
                    rainbow-delimiters
                    imenu-anywhere
                    aggressive-indent
                    iedit
                    tidy
                    drag-stuff
                    elisp-slime-nav
                    emacs-eclim
                    better-defaults
                    color-identifiers-mode
                    whitespace-cleanup-mode
                    powerline
                    anzu
                    thingatpt
                    keyfreq
                    ag
                    swiper
                    counsel
                    super-save
                    smooth-scrolling
                    link-hint
                    highlight-parentheses
                    neotree
                    quickrun
                    kurecolor
                    java-imports
                    origami
                    rainbow-mode
                    golden-ratio
                    golden-ratio-scroll-screen
                    popwin
                    git-timemachine
                    git-gutter-fringe+
                    git-gutter+
		    hydra
                    spaceline
                    spacemacs-theme
                    restclient
                    htmlize
                    window-numbering
                    highlight-numbers
                    hungry-delete
                    pbcopy
                    ctags-update
                    workgroups2
                    smartparens
                    clojure-mode
                    clojure-snippets
                    cider
                    clojure-cheatsheet
                    cider-eval-sexp-fu
                    4clojure
                    paren-face
                    clj-refactor
                    typed-clojure-mode
                    transpose-frame
                    auto-compile
                    sqlup-mode
                    sql-indent
                    peep-dired
                    ranger
                    ))

(dolist (p my-packages)
  (when (not (package-installed-p p))
    (package-install p)))
(setq load-prefer-newer t)
(package-initialize)
(require 'auto-compile)
(auto-compile-on-load-mode)
(auto-compile-on-save-mode)
(require 'use-package)
(add-to-list 'load-path (expand-file-name "elisp" user-emacs-directory))
(require 'init-defaults)
(use-package better-defaults)
(require 'init-defuns)
(require 'init-platform)
(require 'init-helm)
(require 'init-hydra)
(require 'init-evil)
(require 'init-whichkey)
(require 'init-yasnippet)
(require 'init-projectile)
(require 'init-ido)
(require 'init-magit)
(require 'init-git)
(require 'init-fancy-narrow)
(require 'init-org-2)
(require 'init-clojure)
(require 'init-minor-modes)
(require 'init-expand-region)
(require 'init-undotree)
(require 'init-keyfreq)
(require 'init-smartparens)
(require 'init-hl-line)
(require 'init-company)
(require 'init-easy-kill)
(require 'init-imenu-anywhere)
(require 'init-zop-to-char)
(require 'init-programming)
(require 'init-eclim)
(require 'init-elisp-slime-nav)
(require 'init-aggressive-indent)
(require 'init-avy)
(require 'init-drag-stuff)
(require 'init-dired)
(require 'init-anzu)
(require 'init-ag)
(require 'init-keyfreq)
(require 'init-ivy)
(require 'init-color-identifiers)
(require 'init-super-save)
(require 'init-smooth-scrolling)
(require 'init-link-hint)
(require 'init-beacon)
(require 'init-eval-sexp-fu)
(require 'init-highlight-parentheses)
(require 'init-neotree)
(require 'init-quickrun)
(require 'init-kurecolor)
(require 'init-rainbow-mode)
(require 'init-ace-window)
(require 'init-golden-ratio)
(require 'init-spaceline)
(require 'init-restclient)
(require 'init-htmlize)
(require 'init-transpose)
(require 'init-window-numbering)
(require 'init-popwin)
(require 'init-sql)
(require 'init-diminish)
(require 'init-workgroups2)
(require 'init-keybindings)

(let ((local-config (expand-file-name "local.el" user-emacs-directory)))
  (when (file-exists-p local-config)
    (load local-config)))

(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (select-frame frame)
                (setq ns-use-srgb-colorspace nil)
                (load-theme 'spacemacs-dark t)))
  (load-theme 'spacemacs-dark t))

(custom-set-faces
 '(show-paren-match ((t (:background "default" :foreground "lemon chiffon" :underline t :overline nil))))
 '(show-paren-mismatch ((((class color)) (:background "red" :foreground "white")))))
